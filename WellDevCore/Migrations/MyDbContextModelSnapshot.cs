// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bolnica.Model;

namespace bolnica.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Director.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Model.Director.Renovation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomOccupationReportDTOId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomOccupationReportDTOId");

                    b.ToTable("Renovation");
                });

            modelBuilder.Entity("Model.Director.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentNumberOfPatients")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfPatientsForHospitalization")
                        .HasColumnType("int");

                    b.Property<string>("RoomCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("RoomTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Model.Director.RoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("Model.Doctor.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Model.Doctor.DoctorGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("AverageGrade")
                        .HasColumnType("double");

                    b.Property<int>("NumberOfGrades")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DoctorGrade");
                });

            modelBuilder.Entity("Model.Doctor.Hospitalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomOccupationReportDTOId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientFileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomOccupationReportDTOId");

                    b.ToTable("Hospitalization");
                });

            modelBuilder.Entity("Model.Doctor.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomOccupationReportDTOId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecretaryReportDTOId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientFileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomOccupationReportDTOId");

                    b.HasIndex("SecretaryReportDTOId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Model.Doctor.Referral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PeriodId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("Model.Doctor.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("Model.Dto.DoctorReportDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AnemnesisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("prescriptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnemnesisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("prescriptionId");

                    b.ToTable("DoctorReportDTO");
                });

            modelBuilder.Entity("Model.Dto.ExaminationDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RoomId");

                    b.ToTable("ExaminationDTO");
                });

            modelBuilder.Entity("Model.Dto.SecretaryReportDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SecretaryReportDTO");
                });

            modelBuilder.Entity("Model.PatientSecretary.Allergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Model.PatientSecretary.Anemnesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Anemnesis");
                });

            modelBuilder.Entity("Model.PatientSecretary.Diagnosis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Model.PatientSecretary.Drug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TherapyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("Model.PatientSecretary.Examination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AnemnesisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiagnosisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RefferalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomOccupationReportDTOId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomOccupationReportDTOId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecretaryReportDTOId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TherapyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnemnesisId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientFileId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("RefferalId");

                    b.HasIndex("RoomOccupationReportDTOId");

                    b.HasIndex("RoomOccupationReportDTOId1");

                    b.HasIndex("SecretaryReportDTOId");

                    b.HasIndex("TherapyId");

                    b.HasIndex("UserId");

                    b.ToTable("Examination");
                });

            modelBuilder.Entity("Model.PatientSecretary.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Model.PatientSecretary.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("PatientFile");
                });

            modelBuilder.Entity("Model.PatientSecretary.Period", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("BusinessDayId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessDayId");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("Model.PatientSecretary.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("Model.PatientSecretary.Symptom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Symptom");
                });

            modelBuilder.Entity("Model.PatientSecretary.Therapy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.ToTable("Therapy");
                });

            modelBuilder.Entity("Model.Users.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("TownId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Model.Users.BusinessDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<long?>("doctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("roomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("doctorId");

                    b.HasIndex("roomId");

                    b.ToTable("BusinessDay");
                });

            modelBuilder.Entity("Model.Users.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Person");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Model.Users.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Model.Users.Town", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PostalNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("bolnica.Model.Dto.BusinessDayDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PeriodId");

                    b.ToTable("BusinessDayDTO");
                });

            modelBuilder.Entity("bolnica.Model.Dto.NotifyDoctorBusinessDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("roomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("shiftId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("roomId");

                    b.HasIndex("shiftId");

                    b.ToTable("NotifyDoctorBusinessDay");
                });

            modelBuilder.Entity("bolnica.Model.Dto.PatientNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientNotification");
                });

            modelBuilder.Entity("bolnica.Model.Dto.RoomOccupationReportDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("periodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("roomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("periodId");

                    b.HasIndex("roomId");

                    b.ToTable("RoomOccupationReportDTO");
                });

            modelBuilder.Entity("bolnica.Model.Users.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Publish")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Model.Users.User", b =>
                {
                    b.HasBaseType("Model.Users.Person");

                    b.Property<string>("Image")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Model.Users.Director", b =>
                {
                    b.HasBaseType("Model.Users.User");

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("Model.Users.Doctor", b =>
                {
                    b.HasBaseType("Model.Users.User");

                    b.Property<long?>("DoctorGradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpecialtyId")
                        .HasColumnType("bigint");

                    b.HasIndex("DoctorGradeId");

                    b.HasIndex("SpecialtyId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Model.Users.Patient", b =>
                {
                    b.HasBaseType("Model.Users.User");

                    b.Property<long?>("patientFileId")
                        .HasColumnType("bigint");

                    b.HasIndex("patientFileId");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Model.Users.Secretary", b =>
                {
                    b.HasBaseType("Model.Users.User");

                    b.HasDiscriminator().HasValue("Secretary");
                });

            modelBuilder.Entity("Model.Director.Renovation", b =>
                {
                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("Model.Director.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("bolnica.Model.Dto.RoomOccupationReportDTO", null)
                        .WithMany("renovations")
                        .HasForeignKey("RoomOccupationReportDTOId");
                });

            modelBuilder.Entity("Model.Director.Room", b =>
                {
                    b.HasOne("Model.Director.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId");
                });

            modelBuilder.Entity("Model.Doctor.Article", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("Model.Doctor.Hospitalization", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.PatientSecretary.PatientFile", null)
                        .WithMany("Hospitalization")
                        .HasForeignKey("PatientFileId");

                    b.HasOne("Model.Users.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("Model.Director.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("bolnica.Model.Dto.RoomOccupationReportDTO", null)
                        .WithMany("hospitalizations")
                        .HasForeignKey("RoomOccupationReportDTOId");
                });

            modelBuilder.Entity("Model.Doctor.Operation", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.PatientSecretary.PatientFile", null)
                        .WithMany("Operation")
                        .HasForeignKey("PatientFileId");

                    b.HasOne("Model.Users.User", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("Model.Director.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("bolnica.Model.Dto.RoomOccupationReportDTO", null)
                        .WithMany("operations")
                        .HasForeignKey("RoomOccupationReportDTOId");

                    b.HasOne("Model.Dto.SecretaryReportDTO", null)
                        .WithMany("Operations")
                        .HasForeignKey("SecretaryReportDTOId");
                });

            modelBuilder.Entity("Model.Doctor.Referral", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("Model.Dto.DoctorReportDTO", b =>
                {
                    b.HasOne("Model.PatientSecretary.Anemnesis", "Anemnesis")
                        .WithMany()
                        .HasForeignKey("AnemnesisId");

                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.PatientSecretary.Prescription", "prescription")
                        .WithMany()
                        .HasForeignKey("prescriptionId");
                });

            modelBuilder.Entity("Model.Dto.ExaminationDTO", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("Model.Director.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Allergy", b =>
                {
                    b.HasOne("Model.PatientSecretary.PatientFile", null)
                        .WithMany("Allergy")
                        .HasForeignKey("PatientFileId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Drug", b =>
                {
                    b.HasOne("Model.PatientSecretary.Drug", null)
                        .WithMany("Alternative")
                        .HasForeignKey("DrugId");

                    b.HasOne("Model.PatientSecretary.Prescription", null)
                        .WithMany("Drug")
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("Model.PatientSecretary.Therapy", null)
                        .WithMany("Drug")
                        .HasForeignKey("TherapyId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Examination", b =>
                {
                    b.HasOne("Model.PatientSecretary.Anemnesis", "Anemnesis")
                        .WithMany()
                        .HasForeignKey("AnemnesisId");

                    b.HasOne("Model.PatientSecretary.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.PatientSecretary.PatientFile", null)
                        .WithMany("Examination")
                        .HasForeignKey("PatientFileId");

                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("Model.PatientSecretary.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("Model.Doctor.Referral", "Refferal")
                        .WithMany()
                        .HasForeignKey("RefferalId");

                    b.HasOne("bolnica.Model.Dto.RoomOccupationReportDTO", null)
                        .WithMany("examinations")
                        .HasForeignKey("RoomOccupationReportDTOId");

                    b.HasOne("bolnica.Model.Dto.RoomOccupationReportDTO", null)
                        .WithMany("previousExaminations")
                        .HasForeignKey("RoomOccupationReportDTOId1");

                    b.HasOne("Model.Dto.SecretaryReportDTO", null)
                        .WithMany("Examinations")
                        .HasForeignKey("SecretaryReportDTOId");

                    b.HasOne("Model.PatientSecretary.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId");

                    b.HasOne("Model.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Ingredient", b =>
                {
                    b.HasOne("Model.PatientSecretary.Drug", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Period", b =>
                {
                    b.HasOne("Model.Users.BusinessDay", null)
                        .WithMany("ScheduledPeriods")
                        .HasForeignKey("BusinessDayId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Prescription", b =>
                {
                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("Model.PatientSecretary.Therapy", b =>
                {
                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("Model.Users.Address", b =>
                {
                    b.HasOne("Model.Users.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId");
                });

            modelBuilder.Entity("Model.Users.BusinessDay", b =>
                {
                    b.HasOne("Model.PatientSecretary.Period", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("Model.Users.Doctor", "doctor")
                        .WithMany("BusinessDay")
                        .HasForeignKey("doctorId");

                    b.HasOne("Model.Director.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomId");
                });

            modelBuilder.Entity("Model.Users.Person", b =>
                {
                    b.HasOne("Model.Users.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Model.Users.Town", b =>
                {
                    b.HasOne("Model.Users.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("bolnica.Model.Dto.BusinessDayDTO", b =>
                {
                    b.HasOne("Model.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Model.PatientSecretary.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("bolnica.Model.Dto.NotifyDoctorBusinessDay", b =>
                {
                    b.HasOne("Model.Director.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomId");

                    b.HasOne("Model.PatientSecretary.Period", "shift")
                        .WithMany()
                        .HasForeignKey("shiftId");
                });

            modelBuilder.Entity("bolnica.Model.Dto.PatientNotification", b =>
                {
                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("bolnica.Model.Dto.RoomOccupationReportDTO", b =>
                {
                    b.HasOne("Model.PatientSecretary.Period", "period")
                        .WithMany()
                        .HasForeignKey("periodId");

                    b.HasOne("Model.Director.Room", "room")
                        .WithMany()
                        .HasForeignKey("roomId");
                });

            modelBuilder.Entity("bolnica.Model.Users.Feedback", b =>
                {
                    b.HasOne("Model.Users.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Model.Users.Doctor", b =>
                {
                    b.HasOne("Model.Doctor.DoctorGrade", "DoctorGrade")
                        .WithMany()
                        .HasForeignKey("DoctorGradeId");

                    b.HasOne("Model.Doctor.Speciality", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId");
                });

            modelBuilder.Entity("Model.Users.Patient", b =>
                {
                    b.HasOne("Model.PatientSecretary.PatientFile", "patientFile")
                        .WithMany()
                        .HasForeignKey("patientFileId");
                });
#pragma warning restore 612, 618
        }
    }
}
