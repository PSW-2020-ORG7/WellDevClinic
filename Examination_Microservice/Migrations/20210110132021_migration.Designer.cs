// <auto-generated />
using System;
using Examination_Microservice.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Examination_Microservice.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20210110132021_migration")]
    partial class migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Allergy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientFileId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Anamnesis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Anamnesis");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Diagnosis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorGradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpecialityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorGradeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.DoctorGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("NumberOfGrades")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DoctorGrade");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.DoctorGradeQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorGradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorGradeId1")
                        .HasColumnType("bigint");

                    b.Property<double>("Grade")
                        .HasColumnType("double");

                    b.Property<string>("Question")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DoctorGradeId");

                    b.HasIndex("DoctorGradeId1");

                    b.ToTable("DoctorGradeQuestion");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Drug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TherapyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("TherapyId");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.ExaminationDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("AnamnesisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiagnosisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PrescriptionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SympthomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TherapyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientFileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescriptionId");

                    b.HasIndex("SympthomId");

                    b.HasIndex("TherapyId");

                    b.ToTable("ExaminationDetails");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Hospitalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientFileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Hospitalization");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientFileId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Guest")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.PatientFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("PatientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFile");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Prescription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Referral", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("DoctorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentNumberOfPatients")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfPatientsForHospitalization")
                        .HasColumnType("int");

                    b.Property<string>("RoomCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long?>("RoomTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.RoomType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Speciality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Sympthom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Sympthom");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Therapy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Therapy");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Allergy", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.PatientFile", null)
                        .WithMany("Allergy")
                        .HasForeignKey("PatientFileId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Doctor", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.DoctorGrade", "DoctorGrade")
                        .WithMany()
                        .HasForeignKey("DoctorGradeId");

                    b.HasOne("Examination_Microservice.Domain.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("Examination_Microservice.Domain.Model.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.DoctorGradeQuestion", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.DoctorGrade", null)
                        .WithMany("AverageGrade")
                        .HasForeignKey("DoctorGradeId");

                    b.HasOne("Examination_Microservice.Domain.Model.DoctorGrade", null)
                        .WithMany("DoctorGradeQuestions")
                        .HasForeignKey("DoctorGradeId1");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Drug", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Drug", null)
                        .WithMany("Alternative")
                        .HasForeignKey("DrugId");

                    b.HasOne("Examination_Microservice.Domain.Model.Prescription", null)
                        .WithMany("Drug")
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("Examination_Microservice.Domain.Model.Therapy", null)
                        .WithMany("Drug")
                        .HasForeignKey("TherapyId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.ExaminationDetails", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Anamnesis", "Anamnesis")
                        .WithMany()
                        .HasForeignKey("AnamnesisId");

                    b.HasOne("Examination_Microservice.Domain.Model.Diagnosis", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("Examination_Microservice.Domain.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Examination_Microservice.Domain.Model.PatientFile", null)
                        .WithMany("Examination")
                        .HasForeignKey("PatientFileId");

                    b.HasOne("Examination_Microservice.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Examination_Microservice.Domain.Model.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");

                    b.HasOne("Examination_Microservice.Domain.Model.Sympthom", "Sympthom")
                        .WithMany()
                        .HasForeignKey("SympthomId");

                    b.HasOne("Examination_Microservice.Domain.Model.Therapy", "Therapy")
                        .WithMany()
                        .HasForeignKey("TherapyId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Hospitalization", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Examination_Microservice.Domain.Model.PatientFile", null)
                        .WithMany("Hospitalization")
                        .HasForeignKey("PatientFileId");

                    b.HasOne("Examination_Microservice.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Examination_Microservice.Domain.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Ingredient", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Drug", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DrugId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Operation", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("Examination_Microservice.Domain.Model.PatientFile", null)
                        .WithMany("Operation")
                        .HasForeignKey("PatientFileId");

                    b.HasOne("Examination_Microservice.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Examination_Microservice.Domain.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Patient", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.PatientFile", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Referral", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("Examination_Microservice.Domain.Model.Room", b =>
                {
                    b.HasOne("Examination_Microservice.Domain.Model.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
